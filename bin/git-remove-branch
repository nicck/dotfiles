#!/usr/bin/env ruby

keep_branches = %w(master production information_evolution beta preview)

current_branch = `git branch`.lines.map(&:strip)
  .detect { |l| l.include?('* ') }.sub(/\A\* /, '')

unless current_branch == 'master'
  puts "WARNING: You are on branch #{current_branch}, NOT master."
end

puts 'Fetching merged branches...'

system 'git remote prune origin'

# remote_branches=$(git branch -r --merged | grep -v '/master$' | grep -v "/$current_branch$" | grep -v "/$production_branch$")
remote_branches = `git branch -r --merged`.lines.map(&:strip)
  .reject { |l| keep_branches.any? { |branch| l.include?("/#{branch}")  } }

# local_branches=$(git branch --merged | grep -v 'master$' | grep -v "$current_branch$" | grep -v "$production_branch$")
local_branches = `git branch --merged`.lines.map(&:strip)
  .reject { |l| keep_branches.any? { |branch| l.sub(/\A\* /, '') == branch} }

if remote_branches.empty? && local_branches.empty?
  puts 'No existing branches have been merged into $current_branch.'
  exit
end

puts 'This will remove the following branches:'
puts

if remote_branches.any?
  puts remote_branches * "\n"
end

puts

if local_branches.any?
  puts local_branches * "\n"
end

puts
print 'Continue? (y/n): '
choice = gets.strip

if choice.downcase != 'y'
  puts 'No branches removed.'
  exit
end

# Remove remote branches
remote_branches.each do |branch|
  # TODO: now it works only with origin
  system "git push origin %s" % branch.sub('origin/', ':')
end

# Remove local branches
local_branches.each do |branch|
  system "git branch -d #{branch}"
end
